# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    #parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
             aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"      

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: front-end test
         command: |
              cd frontend
              npm install
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
        - checkout
        - run:
            name: back-end test
            command: |
              cd backend
              npm install
              npm run test
              
  scan-frontend:
    docker:
     - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: front-end scanning
         command: |
           cd frontend
           npm install
           npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
         name: back-end scanning
         command: |
           cd backend
           npm install
           npm audit fix --audit-level=critical --force
  
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: adding inventory file
          command: |
                touch inventory
                echo [all] > ~/inventory     
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker: 
      - image : python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["72:d6:f5:b8:15:55:68:d6:47:03:ee:ca:88:fd:33:12"] # You can get this ID in the section where you registered the SSH Key
      - run:
          name: Install AWS CLI
          command: |
             apk --no-cache add py-pip
             pip install awscli
             
      - run:
          name: cat inventory file2
          command: |
              cat ~/inventory.txt   

      - run:
          name: cat configure file
          command: |
              cat .circleci/ansible/configure-server.yml      
                 
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible     
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/inventory.txt .circleci/ansible/configure-server.yml 
      - destroy-environment    

  run-migrations:
     docker:
      - image: circleci/node:13.8.0
     steps:
      - checkout
      - run:
          name: Run migrations
          command: |
             cd backend
             npm install
             npm run migrations > ~/migrations_dump.txt
      - run:
          name: echo text in migration output file
          command: |
               echo  "has been executed successfully."  >> ~/migrations_dump.txt       
      - run:
          name: cat the migration file
          command: | 
              cat ~/migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |   
              if grep -q "has been executed successfully." ~/migrations_dump.txt
              then
              # If you are using kvdb.io, generate the bucket ID "EjujsHxMS95ibH9g3ttXwA" in your local terminal first
              curl --insecure https://kvdb.io/EjujsHxMS95ibH9g3ttXwA/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi         
      - persist_to_workspace:
          root: ~/
          paths: 
            - migrations_dump.txt
      - destroy-environment          
        
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:              
          name: Install tar gzip
          command: |
            yum -y install tar gzip
      - restore_cache:
          keys: [frontend-build]
      - run:   
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
                cd frontend
                npm install
                npm run build
                tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz node_modules
                aws s3 cp node_modules s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - inventory.txt     

  deploy-backend:
    docker:
      - image : python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["72:d6:f5:b8:15:55:68:d6:47:03:ee:ca:88:fd:33:12"] # You can get this ID in the section where you registered the SSH Key
 #     - run:
 #         name: Install AWS CLI
 #         command: |
 #           apk add --no-cache \
 #           python3 \
 #           py3-pip \
 #           && pip3 install --upgrade pip \
 #           && pip3 install --no-cache-dir \
 #           awscli \
 #           && rm -rf /var/cache/apk/*
      - restore_cache:
          keys: [backend-build]             
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
             cd backend
             npm i
             npm run build
             cd ..
             # Zip the directory
             tar -C backend -czvf artifact.tar.gz .
             cd .circleci/ansible
             echo "Contents  of the inventory.txt file is -------"
             cat inventory.txt
             ansible-playbook -i ~/inventory.txt deploy-backend.yml
      - run:
          name: ansible-playbook
          command: |
              npm install
              pm2 stop default
              pm2 start npm -- start        
        
      # Here's where you will add some code to rollback on failure         


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  UdaPeopleCIWorkflow:
    jobs:
      - build-frontend
      - build-backend
   #   - test-frontend:
   #       requires: [build-frontend]
   #   - test-backend:
   #       requires: [build-backend]
   #   - scan-backend:
   #       requires: [build-backend]
   #   - scan-frontend:
   #       requires: [build-frontend]
   #   - deploy-infrastructure:
   #       requires: [test-frontend, test-backend, scan-frontend, scan-backend]
   #   - configure-infrastructure:
   #        requires: [deploy-infrastructure]    
   #   - run-migrations:
   #       requires: [configure-infrastructure]
      - deploy-frontend
   #       requires: [run-migrations]
      - deploy-backend
   #       requires: [run-migrations]
